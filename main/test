test = JuMP.Model(optimizer_with_attributes(Ipopt.Optimizer, "max_cpu_time"=>100.0))

@variable(test, cpar) 
@variable(test, m) #scaler

#@NLexpression(test,c, exp(cpar) )
c = @expression(test, exp(cpar) )

norm_cdf(x) = cdf(Normal(), x)
norm_pdf(x) = pdf(Normal(), x)
register(test, :norm_cdf, 1, norm_cdf; autodiff = true)
register(test, :norm_pdf, 1, norm_pdf; autodiff = true)
@NLconstraint(test, c == norm_pdf(m) + m *(norm_cdf(m) - 1))


@NLparameter(test, p == 1)
f(x, p) = (x - p)^2
register(test, :f, 2, f; autodiff = true)
@NLobjective(test, Min, f(c, p))

optimize!(test)
value(c), value(m)

norm_pdf(value(m)) + value(m) *(norm_cdf(value(m)) - 1)